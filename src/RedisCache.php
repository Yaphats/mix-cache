<?php

namespace Mix\Cache;

use Mix\Core\Component;
use Psr\SimpleCache\CacheInterface;

/**
 * Class RedisCache
 * @package Mix\Cache
 * @author LIUJIAN <coder.keda@gmail.com>
 */
class RedisCache extends Component implements CacheInterface
{

    /**
     * 连接池
     * @var \Mix\Pool\ConnectionPoolInterface
     */
    public $pool;

    /**
     * 处理者
     * @var \Mix\Redis\RedisConnectionInterface
     */
    public $handler;

    /**
     * Key前缀
     * @var string
     */
    public $keyPrefix = 'CACHE:';

    /**
     * 初始化事件
     */
    public function onInitialize()
    {
        parent::onInitialize(); // TODO: Change the autogenerated stub
        // 从连接池获取连接
        if (isset($this->pool)) {
            $this->handler = $this->pool->getConnection();
        }
    }

    /**
     * 获取缓存
     * @param $key
     * @param null $default
     * @return mixed
     */
    public function get($key, $default = null)
    {
        $cacheKey = $this->keyPrefix . $key;
        $value    = $this->handler->get($cacheKey);
        if (empty($value)) {
            return $default;
        }
        $value = unserialize($value);
        if ($value === false) {
            return $default;
        }
        return $value;
    }

    /**
     * 设置缓存
     * @param $key
     * @param $value
     * @param null $ttl
     * @return bool
     */
    public function set($key, $value, $ttl = null)
    {
        $cacheKey = $this->keyPrefix . $key;
        if (is_null($ttl)) {
            $success = $this->handler->set($cacheKey, serialize($value));
        } else {
            $success = $this->handler->setex($cacheKey, $ttl, serialize($value));
        }
        return $success ? true : false;
    }

    /**
     * 删除缓存
     * @param $key
     * @return bool
     */
    public function delete($key)
    {
        $cacheKey = $this->keyPrefix . $key;
        $success  = $this->handler->del($cacheKey);
        return $success ? true : false;
    }

    /**
     * 清除缓存
     * @return bool
     */
    public function clear()
    {
        $iterator = null;
        while (true) {
            $keys = $this->handler->scan($iterator, "{$this->keyPrefix}*");
            if ($keys === false) {
                return true;
            }
            foreach ($keys as $key) {
                $this->handler->del($key);
            }
        }
    }

    /**
     * 批量获取
     * @param $keys
     * @param null $default
     * @return array
     */
    public function getMultiple($keys, $default = null)
    {
        $results = [];
        foreach ($keys as $key) {
            $results[$key] = $this->get($key, $default);
        }
        return $results;
    }

    /**
     * 批量设置
     * @param $values
     * @param null $ttl
     * @return bool
     */
    public function setMultiple($values, $ttl = null)
    {
        $results = [];
        foreach ($values as $key => $value) {
            $results[] = $this->set($key, $value, $ttl);
        }
        foreach ($results as $result) {
            if (!$result) {
                return false;
            }
        }
        return true;
    }

    /**
     * 批量删除
     * @param $keys
     * @return bool
     */
    public function deleteMultiple($keys)
    {
        $results = [];
        foreach ($keys as $key) {
            $results[] = $this->delete($key);
        }
        foreach ($results as $result) {
            if (!$result) {
                return false;
            }
        }
        return true;
    }

    /**
     * 判断缓存是否存在
     * @param $key
     * @return bool
     */
    public function has($key)
    {
        $cacheKey = $this->keyPrefix . $key;
        $success  = $this->handler->exists($cacheKey);
        return $success ? true : false;
    }

}
