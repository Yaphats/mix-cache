<?php

namespace Mix\Cache;

use Mix\Core\Component;

/**
 * Class RedisCache
 * @package Mix\Cache
 * @author LIUJIAN <coder.keda@gmail.com>
 */
class RedisCache extends Component
{

    /**
     * 连接池
     * @var \Mix\Pool\ConnectionPoolInterface
     */
    public $pool;

    /**
     * 处理者
     * @var \Mix\Redis\RedisConnectionInterface
     */
    public $handler;

    /**
     * 初始化事件
     */
    public function onInitialize()
    {
        parent::onInitialize(); // TODO: Change the autogenerated stub
        // 从连接池获取连接
        if (isset($this->pool)) {
            $this->handler = $this->pool->getConnection();
        }
    }

    /**
     * 获取缓存
     * @param $key
     * @param null $default
     * @return mixed
     */
    public function get($key, $default = null)
    {

    }

    /**
     * 设置缓存
     * @param $key
     * @param $value
     * @param null $ttl
     * @return bool
     */
    public function set($key, $value, $ttl = null)
    {

    }

    /**
     * 删除缓存
     * @param $key
     * @return bool
     */
    public function delete($key)
    {

    }

    /**
     * 清除缓存
     * @return bool
     */
    public function clear()
    {

    }

    /**
     * 批量获取
     * @param $keys
     * @param null $default
     * @return array
     */
    public function getMultiple($keys, $default = null)
    {

    }

    /**
     * 批量设置
     * @param $values
     * @param null $ttl
     * @return bool
     */
    public function setMultiple($values, $ttl = null)
    {

    }

    /**
     * 批量删除
     * @param $keys
     * @return bool
     */
    public function deleteMultiple($keys)
    {

    }

    /**
     * 判断缓存是否存在
     * @param $key
     * @return bool
     */
    public function has($key)
    {

    }

}
